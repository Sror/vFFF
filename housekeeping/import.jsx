#include "glue code.jsx";#include "findChange.jsx";#include "footnote.jsx";#include "./meta/FileWriter.jsx";//#include "clear_XML_Structure.jsx";var i_data = new Object();i_data.xml  = null;i_data.doc = null;function importer(aDoc,xmlRef,list){        //i_data.doc = aDoc;    //i_data.xml = xml;    //alert(" in importer\n" + xmlRef.name );	var doc = aDoc;    	var p;	var font1;	var font2;	var font3;	var col1, col2;	var root;	var cs1, cs2;	var append = true;	/*		var theDiag = app.dialogs.add({name:"Setup Dialog"});	//Add a dialog column.	with(theDiag.dialogColumns.add()){		staticTexts.add({staticLabel:"build a new document?"});	}	var result = theDiag.show();	//If the user clicked OK, display one message;	if(result == true){		// this creates a new document		doc = setupDoc();	}else{		append = true;		doc = app.activeDocument;		// this checks for the right setup in the doc to run all functions		alert("if the doc: "+ doc.name +" is not build by this script. It won't work");	}	//Remove the dialog box from memory.	theDiag.destroy();    */	importXml(doc,xmlRef);	// the xml is a bit messy for our purpouse	// this cleans out the unneeded elements	cleanUpXml(doc,root);	makeAttributes(doc);		//this is for making the textFrames like the pages margins	var likeColumns = false;	var theFrame = placeByAttribute(doc,likeColumns,append,list);	// apply the basic paragraph style	theFrame.parentStory.appliedParagraphStyle = doc.paragraphStyles.item("body");	DumbRunPages(doc,theFrame.parentStory,likeColumns);	findStyleMeta(doc);	findTags(doc);	//this is experimental	//findIMG(doc);//	findNotes(doc);	buildFootnotes(doc,theFrame.parentStory);	//this should be the last find/change	takeOutTheTrash(doc);	takeOutTheTrash(doc);	//theFrame.associatedXMLElement.untag();	//remove_empty_frames(doc);	//clear_structure(app.documents.item(0));	//untagAllxmlElements(app.documents.item(0));	//app.documents.item(0).xmlElements.item(0).remove();	alert("Done");		}// based on dumbrunpages by dave saundersfunction DumbRunPages(doc, theStory,likeColumns) {   	// What makes this "dumb" is that default master pages are used.   	//var uRuler = theDoc.viewPreferences.rulerOrigin;   	//theDoc.viewPreferences.rulerOrigin = RulerOrigin.spreadOrigin;   	while (theStory.textContainers[theStory.textContainers.length-1].overflows) {   		var backPage = doc.pages.add();		app.activeWindow.activePage = backPage;   		var myPbounds = backPage.bounds;   		 var myNewTF = backPage.textFrames.add({			geometricBounds: getBounds(doc, backPage)		});		myNewTF.itemLayer = theStory.textContainers[theStory.textContainers.length-1].itemLayer;   		myNewTF.previousTextFrame = theStory.textContainers[theStory.textContainers.length-1];   	if(likeColumns==true){		myNewTF.textFramePreferences.textColumnCount = backPage.marginPreferences.columnCount;   		myNewTF.textFramePreferences.textColumnGutter = backPage.marginPreferences.columnGutter; 		}  		if (myNewTF.characters.length == 0){   			//theDoc.viewPreferences.rulerOrigin = uRuler;   			alert("Permanently overset"); // This indicates a permanent overset condition so break out of loop   		}   	}   }// // //param doc //returns nothing directly but the xml gets imported into InDesign ///function importXml(doc,xml) {	var xmlImpPrf = doc.xmlImportPreferences;	xmlImpPrf.allowTransform = false;	xmlImpPrf.createLinkToXML = false;	xmlImpPrf.ignoreUnmatchedIncoming = false;	xmlImpPrf.ignoreWhitespace = true;	xmlImpPrf.importCALSTables = false;	xmlImpPrf.importStyle = XMLImportStyles.mergeImport;	xmlImpPrf.importTextIntoTables = false;	xmlImpPrf.importToSelected = false;	xmlImpPrf.removeUnmatchedExisting = false;	xmlImpPrf.repeatTextElements = false;	try {		root = doc.importXML(xml);	} 	catch (e) {		alert(" :( Sorry, your .xml file seems to be broken.\n" + e);		exit();	}}function cleanUpXml(doc,root) {	doc.xmlComments.everyItem().remove();for (var i=doc.xmlElements.item("rss").xmlElements.item("channel").xmlElements.length-1; i>=0 ; i--) {	if(doc.xmlElements.item("rss").xmlElements.item("channel").xmlElements.item(i).markupTag.name =="item"){		var myItem = doc.xmlElements.item("rss").xmlElements.item("channel").xmlElements.item(i).duplicate();		myItem.move(LocationOptions.atEnd,doc.xmlElements.item("rss"));	}}	doc.xmlElements.item("rss").xmlElements.item("channel").remove();}////// param doc// returns makes attributes from the first Tag// todo fix that and use the Titel instead makes a lot of stuff easier i thinkfunction makeAttributes(doc){	var myRuleSet = new Array(new FindAttributeTitle());	with(doc){	var elements = xmlElements;	__processRuleSet(elements.everyItem(), myRuleSet);	}}//// this gehts the data from the conc//param doc//returns//function placeByAttribute(doc,likeColumns,append,list) {				var p;		if(append == false){		p = doc.pages.lastItem();	}else{		p = doc.pages.add();					}		 var txtFr = p.textFrames.add({			geometricBounds: getBounds(doc, p)		});		if(likeColumns==true){			txtFr.textFramePreferences.textColumnCount = p.marginPreferences.columnCount;   			txtFr.textFramePreferences.textColumnGutter = p.marginPreferences.columnGutter; 			}		txtFr.contents = "";		for(var q = 0; q < list.length; q++){		var myRuleSet = new Array(new FindAndPlaceText(txtFr,list[q]));		with(doc){			var elements = xmlElements;			__processRuleSet(elements.item(0), myRuleSet);		}	}	return txtFr;}function FindAndPlaceText(txtFr,title_id){	//alert(list);	//if(q >10){break;};    this.name = "FindAndPlaceText";    this.xpath = "/rss/item[@id = '"+ title_id+"']";	    this.apply = function(XML_e, myRuleProcessor){		//txtFr.placeXML(XML_e.xmlElements.item("content:encoded"));		//alert(XML_e.xmlElements.item("content:encoded").contents);		txtFr.contents = txtFr.contents  +"\n"+XML_e.xmlElements.item("content:encoded").contents;        //XML_e.xmlElements.item(0).texts.item(0).fillColor = app.documents.item(0).swatches.item(-1);        return true;          }}// RULESETSfunction FindAttributeDomain(){	this.name = "FindAttribute";	this.xpath = "/rss/item/category[@domain = 'tag']||[@nicename]";	this.apply = function(XML_e, myRuleProcessor){			//XML_e.xmlAttributes.item("domain").remove();			XML_e.parent.xmlAttributes.add("id", XML_e.texts.item(0).contents);			//	alert("Yes I found it");			return true;			}}function FindAttributeTitle(){	this.name = "FindAttribute";	this.xpath = "/rss/item/title";//[@domain = 'tag']||[@nicename]	this.apply = function(XML_e, myRuleProcessor){			//XML_e.xmlAttributes.item("domain").remove();			XML_e.parent.xmlAttributes.add("id", XML_e.texts.item(0).contents);			//	alert("Yes I found it");			return true;			}}function remove_empty_frames(doc){	var inlines = doc.stories.everyItem().textFrames.everyItem().getElements();	while(tf=inlines.pop()){		if(tf.contents==""){tf.remove()}	}	}function clear_structure(doc){;	//	the soft way?	//untagAllxmlElements(doc);	//	the hard way?	doc.xmlElements.everyItem().remove();		}function untagAllxmlElements(doc){	var myRuleSet = new Array(new allElements());	with(doc){	var elements = xmlElements;	__processRuleSet(elements.everyItem(), myRuleSet);	}}function allElements(){	this.name = "allElements";	this.xpath = "/rss/*";	this.apply = function(myElement, myRuleProcessor){		__skipChildren(myRuleProcessor);		myElement.untag();		};	}function getBounds(doc, p){	var pWidth = doc.documentPreferences.pageWidth;	var pHeight = doc.documentPreferences.pageHeight	if(p.side == PageSideOptions.leftHand){		var myX2 = p.marginPreferences.left;		var myX1 = p.marginPreferences.right;	}	else{		var myX1 = p.marginPreferences.left;		var myX2 = p.marginPreferences.right;	}	var myY1 = p.marginPreferences.top;	var myX2 = pWidth - myX2;	var myY2 = pHeight - p.marginPreferences.bottom;	return [myY1, myX1, myY2, myX2];}// the pulldown uifunction myDialogUI(){	var myList = app.activeDocument.xmlElements.item("rss").xmlElements.everyItem().xmlAttributes.item("id").value;	var myDialog = app.dialogs.add({name: "CHOOSE THE TEXT TO PLACE",canCancel: true});with (myDialog){		//Add a dialog column.		with (dialogColumns.add()){			//Create a border panel.			with (borderPanels.add()){				with (dialogColumns.add()){					//The following line shows how to set a property as you create an object.					staticTexts.add({staticLabel: "Use Text Tagged With:"});				}				with(dialogColumns.add()){				var myDropDown = dropdowns.add({					stringList:myList					//selectedIndex:0			});									}			}		}		if (myDialog.show() == true) {			var myTag;			//myTag = myDropDown.selectedIndex;			myTag = myList[myDropDown.selectedIndex];			myDialog.destroy();			return myTag;		}else {			myDialog.destroy();		}	}}