{#targetengine "indesign"	// this ID CS 4 -5     // Copyright (C) 2011 Fabian "fabiantheblind" Morón Zirfas  // http://www.the-moron.net // info [at] the - moron . net// This script is free software: you can redistribute it and/or modify// it under the terms of the GNU General Public License as published by// the Free Software Foundation, either version 3 of the License, or// any later version.// This script is distributed in the hope that it will be useful,// but WITHOUT ANY WARRANTY; without even the implied warranty of// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the// GNU General Public License for more details.// You should have received a copy of the GNU General Public License// along with this program.  If not, see <http://www.gnu.org/licenses/.// UI PANEL based on:// rd_EditText.jsx// Copyright (c) 2006-2007 redefinery (Jeffrey R. Almasol). All rights reserved.// check it: www.redefinery.com// // Name: rd_EditText// Version: 2.0		function basic_panel(thisObj,xml,nuDoc){				var x_data = new Object();	// Store globals in an object	// global variables	x_data.xml = xml;	x_data.nuDoc = nuDoc;	x_data.consoleTxt  = "Welcome";	x_data.scriptName = "vFFF WP XML importer";	x_data.scriptTitle = x_data.scriptName + " v0.3";	x_data.str_tmn_SUrl = "http://www.the-moron.net";					x_data.winProgramFiles = Folder.commonFiles.parent.fsName;	x_data.winBrowserCmd = x_data.winProgramFiles + "\\Internet Explorer\\iexplore.exe";// You can chage the browser to use on windows here, use double slashes	x_data.macBrowserCmdStart = "osascript -e 'open location \"";	x_data.macBrowserCmdEnd = "\"'";	x_data.strHelpHeader =  "vFFF Wordpress XML importer Help";	x_data.str3xwtmn = "got to 3xW.T-M.N";	x_data.strHelp = {en: "?"}	x_data.strErrNoCompSel = {en: "Cannot perform operation."};	x_data.strErrNoLayerSel = {en: "Cannot perform operation."};	x_data.app = app.name;	// x_data.strMinAE80 = {en: "This script requires Adobe After Effects CS3 or later."};	x_data.strHelpText = 	"Copyright (c) 2011 fabiantheblind\n";		// Tells us where this script is running from	x_data.scriptsFile = new File($.fileName);	x_data.IconPrssd = new File(x_data.scriptsFile.parent.fsName + "/icons/iconButton_pressed.png");	x_data.IconNormal = new File(x_data.scriptsFile.parent.fsName + "/icons/iconButton_normal.png");	x_data.ufile = new File(x_data.scriptsFile.parent.fsName + "/icons/u.png");	x_data.dfile = new File(x_data.scriptsFile.parent.fsName + "/icons/d.png");	x_data.rlfile = new File(x_data.scriptsFile.parent.fsName + "/icons/rl.png");	x_data.hfile = new File(x_data.scriptsFile.parent.fsName + "/icons/h.png");	x_data.lfile = new File(x_data.scriptsFile.parent.fsName + "/icons/l.png");	x_data.sfile = new File(x_data.scriptsFile.parent.fsName + "/icons/s.png");	x_data.prfile = new File(x_data.scriptsFile.parent.fsName + "/icons/pr.png");	x_data.cfile = new File(x_data.scriptsFile.parent.fsName + "/icons/c.png");	x_data.rmfile = new File(x_data.scriptsFile.parent.fsName + "/icons/rm.png");	x_data.nuffile = new File(x_data.scriptsFile.parent.fsName + "/icons/nuf.png");		x_data.checkedStates = null;	// x_buildUI()	// 	// Description:	// This function builds the user interface.	// 	// Parameters:	// thisObj - Panel object (if script is launched from Window menu); null otherwise.	// 	// Returns:	// Window or Panel object representing the built user interface.	// This is for use in Adobe After Effects 	//	function x_buildUI(thisObj){		var pal = (thisObj instanceof Panel) ? thisObj : new Window("palette", x_data.scriptName, undefined, {resizeable:true});			if (pal != null){							pal.main = pal.add("Group");			pal.main.orientation = "row";						// The List			pal.main.list = pal.main.add ('ListBox', [0, 0, 400, 300], 'asd',{numberOfColumns: 2, showHeaders: true,			columnTitles: ['Number', 'Title']});						//	output: StaticText { text:'" + x_data.consoleTxt  + "', alignment:['full','left'] ,preferredSize:[100,20]}, \			// This is the edit section			var fRes =  "group{orientation:'column', alignment:['left','top'],\            u: IconButton {text:'Move Item Up',preferredSize:[120,20],image:'"+x_data.ufile+"'},\            d: IconButton {text:'Move Item Down',preferredSize:[120,20],image:'"+x_data.dfile+"'},\            rl: IconButton {text:'Refresh List',preferredSize:[120,20],image:'"+x_data.rlfile+"'},\			rm: IconButton {text:'Check In Out',preferredSize:[120,20],image:'"+x_data.rmfile+"'},\            }";			//itemText: EditText { preferredSize: [120, 210], properties: { multiline: true } }, \							pal.main.edit = pal.main.add(fRes);									// this is help load save			var mRes =  "group{orientation:'column', alignment:['left','top'],\            h: IconButton {text:'Help',preferredSize:[120,20],image:'"+x_data.hfile+"'},\			l: IconButton {text:'Load XML File',preferredSize:[120,20],image:'"+x_data.lfile+"'},\            s: IconButton {text:'Save XML File',preferredSize:[120,20],image:'"+x_data.sfile+"'},\            }";			pal.main.meta = pal.main.add(mRes);									// this is the process section /checkbox / process / close			var pRes =  "group{orientation:'column',alignment:['left','top'],\            nuf: IconButton {text:'Build New Doc',preferredSize:[120,20],image:'"+x_data.nuffile+"'},\		pr: IconButton {text:'Process to: ID',preferredSize:[120,20],image:'"+x_data.prfile+"'},\            c: IconButton {text:'Close',preferredSize:[120,20],image:'"+x_data.cfile+"'},\            }";						pal.main.prcss = pal.main.add(pRes);			// This is Styling stuff			var winGfx = pal.graphics;			//var darkColorBrush = winGfx.newPen(winGfx.BrushType.SOLID_COLOR, [0,0,0], 1);			var brightColorBrush = winGfx.newPen(winGfx.BrushType.SOLID_COLOR, [0,0,0], 1);			var brightBGBrush = winGfx.newBrush(winGfx.BrushType.SOLID_COLOR, [1,1,1], 1);			 winGfx.font = ScriptUI.newFont("Courier", 12);						pal.graphics.backgroundColor = brightBGBrush;			pal.graphics.foregroundColor = brightColorBrush;			// End Styling Stuff			pal.layout.layout(true);			pal.layout.resize();									pal.onResizing = pal.onResize = function () {				this.layout.resize();				}							pal.main.list.onChange = function(){				//alert("clicked");				try{				pal.main.edit.itemText.text = pal.main.list.selection.subItems[0].text;				}catch(e){				pal.main.edit.itemText.text = "Sorry, got nothing to push to the box";						}				}						// move the listitems around			pal.main.edit.u.onClick = function () {								//buildHashList(pal.main.list);			var n = pal.main.list.selection.index;				if(n>0){ 				swap (				pal.main.list.items [n-1], pal.main.list.items [n-1].subItems[0],				pal.main.list.items [n], pal.main.list.items [n].subItems[0]);				pal.main.list.selection = n-1;				}			//restoreCheckedState(pal.main.list);			}		//			pal.main.edit.d.onClick = function () {								//buildHashList(pal.main.list);			var n = pal.main.list.selection.index;			var litms = pal.main.list.items;							if (n < litms.length-1){					var buff1 = litms[n].checked;					var buff2 = litms[n+1].checked;				swap (litms[n],litms[n].subItems[0],litms[n+1],litms[n+1].subItems[0]);												pal.main.list.selection = n+1;				}			//restoreCheckedState(pal.main.list);				}						// end moving			// apply the new sort to the list						pal.main.edit.rl.onClick = function (){								if(pal.main.list.items.length != null){															for(var k = 0; k < pal.main.list.items.length ; k++){						pal.main.list.items[k].text =pal.main.list.items[k].index +1;												}															}else{					alert("Sorry, there is nothing to refresh");												}								}						pal.main.edit.rm.onClick = function (){			var sel = pal.main.list.selection;			if(sel.checked == true){				sel.checked = false;				}else{				sel.checked = true;					}				buildHashList(pal.main.list);				}			// // THE META GROUP START			// //			// //						pal.main.meta.h.onClick = function () {					if(typeof(helpWindow_unitTest) == "undefined") {							new helpWindow().run();							}						}											// taken from SnpXMLTreeView.jsx from the ExtendScript SDK			// THIS BUILDS THE LIST			//			//			//			pal.main.meta.l.onClick = function (){				//var x_data.xml = prompt = "Load XML File";						if(File.fs == "Windows"){				var f = File.openDialog("Select your WP XML", "XML Files: *.xml");			}else{				var f = File.openDialog("Select your WP XML", checkMacFileType);				}												if(f != null){				f.open("r");				c = f.read();				f.close();				x_data.xml = new XML(c);			}			// here comes the import 			pal.main.list.removeAll();			// This builds the list content item			var xp  = "//title";			var x = x_data.xml.xpath(xp);			//var xn = new XML(x);			var str = x.toString();			var nStr = str.replace(/<title>/g, "");			var rowsTxt = nStr.split("</title>");			var rows = new Array();			/*			for(var j = 0 ; j < xn.length; j++){				rowsTxt[j] = xn[j];								}			*/			//alert(rowsTxt.length);			for (var i = 0; i < rowsTxt.length;i++){			rows[i] = pal.main.list.add("item", i +1 );			rows[i].checked = true;			//rows[i].itemSize = [300,10];			rows[i].subItems[0].text = rowsTxt[i] ;				}			pal.main.list.selection = 1;						//	var root = win.pnl.gp.xmlTreeView.add("node", this.XML.localName());			//	root.value = this.XML;			//	win.pnl.text = f.name;		}						             		 // END META GROUP			             //buttonDo.onClick = do_Something;			//output.enabled = true;				pal.main.prcss.pr.onClick = function (){		xml = x_data.xml;		nuDoc = x_data.nuDoc;		//pal.close();		}	pal.main.prcss.c.onClick = function (){		pal.close();		}		set_font(pal,"Courier:12");	return pal;	} // end panel}function set_font (control, font) {	for (var m = 0; m < control.children.length; m++) {		if ("GroupPanel".indexOf (control.children[m].constructor.name) > -1){		set_font (control.children[m], font);		}else{		control.children[m].graphics.font = font;		}	}}function restoreCheckedState(list){				for(var p = 0; p < list.length; p++){				list.items[p].checked = x_data.checkedStates[list.items[p].subItems[0].text];					}		}// pal.main.list// this keeps track of the checked statefunction buildHashList(list){ 	    var result =new Array();     for(var l = 0; l < list.length; l++){                 result[list.items[l].subItems[0].text] = list.items[l].checked;                  }     x_data.checkedStates =  result;     } // unusedfunction get_ListItems(xml){	var list = new Array();		if(xml != null){			return list;		} else{			alert("You have to load an xml file");			return;		}		}					// taken from Zorro the layer tagger	 // this function draws the help window	function helpWindow (){			this.windowRef = null;		}		helpWindow.prototype.run = function()		{			var win = new Window("palette", x_data.scriptName ,[100,0,600,600]);  // bounds = [left, top, right, bottom]			this.windowRef = win;			win.btnPanel = win.add("group", [10,10,600,600]);			win.btnPanel.text = win.btnPanel.add("statictext", [10,10,400,25], x_data.strHelpHeader);			win.btnPanel.warnBtn = win.btnPanel.add("edittext", [10,30,470,540], x_data.strHelpText, {multiline:true});			win.btnPanel.tmnBtn = win.btnPanel.add("button", [310, 550,470, 580], x_data.str3xwtmn);			win.btnPanel.tmnBtn.onClick = function() {				openURL(x_data.str_tmn_SUrl);							};			// Display the window			win.center();			win.show();			return true;				}	// This Swaps the listitems		function swap (x, x_0, y, y_0) {		var buff1 = x.checked;	var buff2 = y.checked;		var temp = x.text;	var temp_0 = x_0.text;		x.text = y.text;	x_0.text = y_0.text;	x.checked = buff2;		y.text = temp;	y_0.text = temp_0;	y.checked = buff1;	}	// This function open a URL in a browser - Copyright (c) 2006-2007 redefinery (Jeffrey R. Almasol). All rights reserved.	function openURL(url){		if ($.os.indexOf("Windows") != -1){			system.callSystem("cmd /c \""+x_data.winBrowserCmd + "\" " + url);		} else {			system.callSystem(x_data.macBrowserCmdStart + url + x_data.macBrowserCmdEnd);		}	}				// this is unused	function do_Something(palObj){		app.documents.add();	}	// Utility function so only files with a XML extension can	// be loaded when this script runs on a mac	function checkMacFileType(file)	{		if(!file instanceof Folder){			return true;		}				index = file.name.lastIndexOf(".");		ext = file.name.substring(index + 1);				if(ext == "xml" || ext == "XML"){		return true;		}		return false;	}		  // again taken from the others		// main code:		//		// Prerequisites check// if (parseFloat(app.version) < 8.0){// 	alert(x_localize(x_data.strMinAE80), x_data.scriptName);// } else {	var tmn_Pal = x_buildUI(thisObj);		if (tmn_Pal != null){		// here would be a good place for a startup action			if (tmn_Pal instanceof Window){				// Show the palette				tmn_Pal.center();				tmn_Pal.show();			} else{				tmn_Pal.layout.layout(true);			}				} // close}// this calls the panel//basic_panel(this);// close all}